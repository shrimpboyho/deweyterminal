{"ts":1363645830815,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"$(window).load(function(){\n\n/* SET UP TERMINAL LOGIC*/\n\n// Hide the MODAL\n\n$(\"#modal\").hide();\n\n// Set up command line width properties\n\n$('#givencommand').css(\"width\", 340);\n$('#consolebox').css(\"width\", $(window).width() - 20);\n$('#consolebox').css(\"height\", $(window).height() - 20 - $('givencommand').height());\n$('#consoleoutput').css(\"width\", $('#consolebox').width());\n$('#consoleoutput').css(\"height\", $('#consolebox').height());\n\n// Set up cursor blinking\n\nvar fIn = function () {\n    $(\"#currentcommandcursor\").fadeIn(500, fOut);\n};\nvar fOut = function () {\n    $(\"#currentcommandcursor\").fadeOut(500, fIn);\n};\nfIn();\n\n\n// Set up the action of the enter key and capture current command\n\n$(document).keypress(function (e) {\n    if (e.which == 13) {\n\n        $(\"#consoleoutput\").val($(\"#consoleoutput\").val() + \"\\n\" + \"~$\" + $(\"#givencommand\").val());\n\n        var commandtobegiven = $(\"#givencommand\").val();\n        $(\"#givencommand\").val(\"\");\n        $('#consoleoutput').scrollTop($('#consoleoutput')[0].scrollHeight);\n        if (commandtobegiven != \"\") {\n\n            bunzKernel(commandtobegiven);\n\n        }\n    }\n});\n\n//  Initialize the kernel databases\n\nbunzKernel(\"initregex\");\n\n//Set up kernel function\n\nfunction bunzKernel(kernelcmd) {\n    \n    \n    /*this.sleep = function (milliseconds) {\n        var start = new Date().getTime();\n        for (var i = 0; i < 1e7; i++) {\n          if ((new Date().getTime() - start) > milliseconds){\n            break;\n          }\n        }\n    }   */\n\n\n    // Set up Regex expressions (redundant) :)\n    \n        var colorRegex = /color #.{6}/;\n        var launchRegex = /launch .+/;\n        var simiRegex = /simi .+/;\n    \n    \n    if(kernelcmd == \"initregex\"){\n        \n        var loadCounter; // Count the load\n        \n        for(loadCounter = 0; loadCounter <= 100; loadCounter++){\n             \n            $(\"#consoleoutput\").val($(\"#consoleoutput\").val() + \"\\nInitializing Regex...\" + loadCounter + \"%\");\n            bunzKernel(\"scrollbottom\");\n            //sleep(50);\n             \n        }    \n\n    } \n    \n    if(kernelcmd == \"delay\"){\n        \n      //Shit needs to go here\n\n    }\n    \n    if (kernelcmd == \"help\") {\n        $(\"#consoleoutput\").val($(\"#consoleoutput\").val() + \"\\n\\n==============================================================\\nHello, I'm the Dewey Terminal! Pipe. Here are a list of commands you can run:\\n\\n-> flush\\n\\tClears the bash screen\\n-> redubs\\n-> launch\\n-> f+\\n\\tIncrease bash font-size\\n-> f-\\n\\tDecrease bash font-size\\n-> color #HEXCODE\\n\\tChanges the background of the terminal.\");\n        bunzKernel(\"scrollbottom\");\n    }\n    if (kernelcmd == \"f+\") {\n        $('#consoleoutput').css('font-size', (parseInt($('#consoleoutput').css('font-size')) + 3));\n        $('#givencommand').css('font-size', (parseInt($('#consoleoutput').css('font-size')) + 3));\n        $('body').css('font-size', (parseInt($('#consoleoutput').css('font-size')) + 3));\n       \n    }\n    if (kernelcmd == \"f-\") {\n        $('#consoleoutput').css('font-size', (parseInt($('#consoleoutput').css('font-size')) - 3));\n        $('#givencommand').css('font-size', (parseInt($('#consoleoutput').css('font-size')) - 3));\n        $('body').css('font-size', (parseInt($('#consoleoutput').css('font-size')) - 3));\n        \n    }\n    \n    // Check to see if flush command is entered\n    \n    if (kernelcmd == \"flush\") {\n        $('#consoleoutput').val(\"\");\n    }\n    \n    // A private kernel only function\n    \n    if (kernelcmd == \"scrollbottom\") {\n      $('#consoleoutput').scrollTop($('#consoleoutput')[0].scrollHeight);  \n    }\n    \n    /* Logic for the color commands */\n    \n        if (colorRegex.test(kernelcmd)) {\n          \n          var hexGiven = kernelcmd.split(\"#\");\n          $('body').css(\"background\", hexGiven[1]);\n          $('html').css(\"background\", hexGiven[1]);\n          $('#consoleoutput').css(\"background\", hexGiven[1]);\n          \n        }\n        \n        if (kernelcmd == \"color\") {\n          \n          $(\"#consoleoutput\").val($(\"#consoleoutput\").val() + \"\\nPlease specify a Hex code value to go along with that such as:\\n\\tcolor #212332\");\n          bunzKernel(\"scrollbottom\");\n         \n        }\n    \n    /* Logic for the launch commands */\n    \n        if (launchRegex.test(kernelcmd)) {\n              \n              var launchGiven = kernelcmd.split(\" \");\n              window.open(launchGiven[1]);\n             \n        }\n\n        if (kernelcmd == \"launch\") {\n          \n          $(\"#consoleoutput\").val($(\"#consoleoutput\").val() + \"\\nPlease specify a URL value to go along with that such as:\\n\\tlaunch https://google.com\");\n          bunzKernel(\"scrollbottom\");\n         \n        }\n        \n    // SimSimi Logic\n    \n        if (simiRegex.test(kernelcmd)) {\n            \n             var simiGiven = kernelcmd.split(\" \");\n             var simiRequest = \"http://sandbox.api.simsimi.com/request.p?key=9b7df23f-fa0f-431e-b722-7dcf0f7eb137&lc=en&ft=1.0&text=\" + simiGiven[1] + \"&callback=?.html\";\n           \n            $('#modal').attr('src', simiRequest);\n            window.frames[\"modal\"].location.reload();\n            $('#modal').show();\n            window.open(simiRequest);\n        }\n        \n    /* ERROR MESSAGE FOR BAD COMMAND */\n    \n   //NEEDS WORK!\n\n}\n});\n"]],"start1":0,"start2":0,"length1":0,"length2":5271}]],"length":5271}
{"ts":1363646178627,"patch":[[{"diffs":[[0,"DS WORK!"],[1," WHAT TO DO?"],[0,"\n\n}\n});\n"]],"start1":5255,"start2":5255,"length1":16,"length2":28}]],"length":5283,"saved":false}
